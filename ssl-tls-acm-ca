#!/bin/bash
#Define the domain name

DOMAIN='cloudgeeks.ca'
SUBDOMAIN='vpn'

#Organization Details
COUNTRY='PK'
PROVINCE='Punjab'
LOCATION='Lahore'
DEPARTMENT='IT'
COMMONNAME='Self Signed Certificate'


# Define where to store the generated certs and metadata.
DIR="$(pwd)/tls"

# Optional: Ensure the target directory exists and is empty.
rm -rf "${DIR}"
mkdir -p "${DIR}"





# Create the openssl configuration file. This is used for both generating
# the certificate as well as for specifying the extensions. It aims in favor
# of automation, so the DN is encoding and not prompted.
cat > "${DIR}/openssl.cnf" << EOF
[req]
default_bits = 2048
encrypt_key  = no # Change to encrypt the private key using des3 or similar
default_md   = sha256
prompt       = no
utf8         = yes
# Speify the DN here so we aren't prompted (along with prompt = no above).
distinguished_name = req_distinguished_name
# Extensions for SAN IP and SAN DNS
req_extensions = v3_req
# Be sure to update the subject to match your organization.
[req_distinguished_name]
C  = "$COUNTRY"
ST = "$PROVINCE"
L  = "$LOCATION"
O  = "$DEPARTMENT"
CN = "$COMMONNAME"
# Allow client and server auth. You may want to only allow server auth.
# Link to SAN names.
[v3_req]
basicConstraints     = CA:FALSE
subjectKeyIdentifier = hash
keyUsage             = digitalSignature, keyEncipherment
extendedKeyUsage     = clientAuth, serverAuth
subjectAltName       = @alt_names
# Alternative names are specified as IP.# and DNS.# for IP addresses and
# DNS accordingly. 
[alt_names]
IP.1  = 127.0.0.1
DNS.1 = "$SUBDOMAIN"."$DOMAIN"
DNS.2 = localhost
EOF

# Create the certificate authority (CA). This will be a self-signed CA, and this
# command generates both the private key and the certificate. You may want to 
# adjust the number of bits (4096 is a bit more secure, but not supported in all
# places at the time of this publication). 
#
# To put a password on the key, remove the -nodes option.
#
# Be sure to update the subject to match your organization.
openssl req \
  -new \
  -newkey rsa:2048 \
  -days 36500 \
  -nodes \
  -x509 \
  -subj "/C="$COUNTRY"/ST="$PROVINCE"/L="$LOCATION"/O="$DEPARTMENT"" \
  -keyout "${DIR}/CA.key" \
  -out "${DIR}/CA.crt"
#
# For each server/service you want to secure with your CA, repeat the
# following steps:
#

# Generate the private key for the service. Again, you may want to increase
# the bits to 4096.
openssl genrsa -out "${DIR}/"$DOMAIN".key" 2048

# Generate a CSR using the configuration and the key just generated. We will
# give this CSR to our CA to sign.
openssl req \
  -new -key "${DIR}/"$DOMAIN".key" \
  -out "${DIR}/"$DOMAIN".csr" \
  -config "${DIR}/openssl.cnf"
  
# Sign the CSR with our CA. This will generate a new certificate that is signed
# by our CA.
openssl x509 \
  -req \
  -days 3650 \
  -in "${DIR}/"$DOMAIN".csr" \
  -CA "${DIR}/CA.crt" \
  -CAkey "${DIR}/CA.key" \
  -CAcreateserial \
  -extensions v3_req \
  -extfile "${DIR}/openssl.cnf" \
  -out "${DIR}/"$DOMAIN".crt"

# (Optional) Verify the certificate.
openssl x509 -in "${DIR}/"$DOMAIN".crt" -noout -text

# END

# Generate PFX For Windows 
#openssl pkcs12 -export -out "$DOMAIN".pfx -inkey "$DOMAIN".key -in "$DOMAIN".crt

# https://aws.amazon.com/blogs/security/how-to-prepare-for-aws-move-to-its-own-certificate-authority/

# https://hostadvice.com/how-to/how-to-install-a-self-signed-ssl-certificate-for-apache-on-ubuntu-18-04-server/

# Install the Certificates after creation

# In Ubuntu 18 LTS case, the private key will be placed in /etc/ssl/private/my.key while the CRT will be placed in /etc/ssl/certs/my.crt


### https://uwnthesis.wordpress.com/2019/06/13/openssl-how-to-generate-a-2nd-certificate-csr-from-an-existing-private-key-so-that-the-new-cert-contains-the-same-public-key-as-the-expired-cert/

### openssl x509 -req -in server.csr -signkey server.key -out server.crt

### openssl x509 -req -in cloudgeeks.ca.com.csr -signkey cloudgeeks.ca.com.key -out cloudgeeks.ca.com.crt




# https://github.com/OpenVPN/easy-rsa/blob/master/doc/EasyRSA-Readme.md

# How To SIGN Multiple Certs with existing CA

STEPS
------
OS Ubuntu
---------
apt update -y

apt install -y easy-rsa

cp -r /usr/share/easy-rsa /etc/

# Next, initialize the PKI.
----------------------------

cd /etc/easy-rsa/

Next, initialize the PKI.

# ---> ./easyrsa init-pki

# Generate the Certificate Authority (CA) Certificate and Key
# Next, generate the CA certificate and key for signing OpenVPN server and client certificates.

./easyrsa build-ca nopass

---> Common Name cloudgeeks.ca

# BACKUP
-------
cp   -r /etc/easy-rsa /root

cp -r tls /etc/easy-rsa/


./easyrsa init-pki

# ---> cp CA.crt from tls --->  /etc/easy-rsa/pki/ca.crt
# ---> cp CA.key from tls --->  /etc/easy-rsa/pki/private/ca.key

# Generate Client Certificates and Keys with Existing CA
# Make sure you are in directory ---> /etc/easy-rsa/   because here is the easy-rsa executable exist.

# ---> ./easyrsa build-client-full qasim.cloudgeeks.ca nopass

# ----> ./easyrsa build-client-full asim.cloudgeeks.ca

# ls /etc/easy-rsa/pki/issued   ---> you will see the asim.crt qasim.crt

# ls /etc/easy-rsa/pki/private  ---> you will see the asim.key qasim.key

# That is how to signed with existing CA



# AWS Client VPN FILE Update for every client

<cert>
asim.crt  ---> COPY asim.crt here
</cert>

<key>
asim.key  ---> COPY asim.key here
</key>

ACM Import into AWS 
--------------------

SERVER CERTS
------------
aws acm import-certificate --certificate fileb://cloudgeeks.ca.crt --private-key fileb://cloudgeeks.ca.key --certificate-chain fileb://CA.crt --region us-east-1

CLIENT CERTS
------------
 aws acm import-certificate --certificate fileb://asim.cloudgeeks.ca.crt --private-key fileb://asim.cloudgeeks.ca.key --certificate-chain fileb://CA.crt --region us-east-1

 aws acm import-certificate --certificate fileb://qasim.cloudgeeks.ca.crt --private-key fileb://qasim.cloudgeeks.ca.key --certificate-chain fileb://CA.crt --region us-east-1


# Useful Links

# https://aws.amazon.com/premiumsupport/knowledge-center/client-vpn-multiple-users-same-endpoint/

# https://www.youtube.com/watch?v=LYqLKH8VoYc&feature=youtu.be&ab_channel=AmazonWebServices

# https://kifarunix.com/install-and-setup-openvpn-server-on-ubuntu-20-04/

# https://www.youtube.com/watch?v=Bv70DoHDDCY&ab_channel=PrasadDomala

# https://prasaddomala.com/2020/04/02/aws-client-vpn-setup-private-access-across-aws-accounts-and-vpcs/



# EASYRSA
---------


Certificate Creation
Clone Easy RSA Git Repo

git clone https://github.com/OpenVPN/easy-rsa.git 
Initialize Public Key Infrastructure (PKI)

./easyrsa init-pki

# Output
init-pki complete; you may now create a CA or requests.
Your newly created PKI dir is: /Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki 
Build Certificate Authority

./easyrsa build-ca nopass

# Output
Using SSL: openssl LibreSSL 2.8.3
Generating RSA private key, 2048 bit long modulus
....................................................+++
...................................+++
e is 65537 (0x10001)
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Common Name (eg: your user, host, or server name) [Easy-RSA CA]:clientvpndemo.com

CA creation complete and you may now import and sign cert requests.
Your new CA certificate file for publishing is at:
/Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki/ca.crt 
Build Server Certificate

./easyrsa build-server-full clientvpndemo.com nopass

# Output
Using SSL: openssl LibreSSL 2.8.3
Generating a 2048 bit RSA private key
..............+++
............+++
writing new private key to '/Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki/easy-rsa-8826.owtURY/tmp.5Jx9BY'
-----
Using configuration from /Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki/easy-rsa-8826.owtURY/tmp.M8pVaP
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName            :ASN.1 12:'clientvpndemo.com'
Certificate is to be certified until Jul  5 10:27:28 2022 GMT (825 days)

Write out database with 1 new entries
Data Base Updated 
Build Client Certificate

./easyrsa build-client-full pdomala.clientvpndemo.com nopass

# Output
Using SSL: openssl LibreSSL 2.8.3
Generating a 2048 bit RSA private key
.......................+++
...............................................................................................................................+++
writing new private key to '/Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki/easy-rsa-9028.BEyiiC/tmp.OQB63G'
-----
Using configuration from /Users/prasaddomala/gitrepos/external/easy-rsa/easyrsa3/pki/easy-rsa-9028.BEyiiC/tmp.DZoDDK
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName            :ASN.1 12:'pdomala.clientvpndemo.com'
Certificate is to be certified until Jul  5 10:30:45 2022 GMT (825 days)

Write out database with 1 new entries
Data Base Updated 
Copy required certificates in to a single folder (optional) and upload to AWS Certificate Manager (ACM)

mkdir acm
cp pki/ca.crt acm
cp pki/issued/clientvpndemo.com.crt acm
cp pki/issued/pdomala.clientvpndemo.com.crt acm
cp pki/private/clientvpndemo.com.key acm
cp pki/private/pdomala.clientvpndemo.com.key acm
cd acm

aws acm import-certificate --certificate fileb://clientvpndemo.com.crt --private-key fileb://clientvpndemo.com.key --certificate-chain fileb://ca.crt --region ap-southeast-2
aws acm import-certificate --certificate fileb://pdomala.clientvpndemo.com.crt --private-key fileb://pdomala.clientvpndemo.com.key --certificate-chain fileb://ca.crt --region ap-southeast-2









