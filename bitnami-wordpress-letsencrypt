# https://certbot.eff.org/

# https://certbot.eff.org/instructions

### PART-1### ---> Obtaining the Letsencrypt

Ubuntu-18-LTS

### Run This

## 1.SSH into the server
SSH into the server running your HTTP website as a user with sudo privileges.

### 2Add Certbot PPA
### You'll need to add the Certbot PPA to your list of repositories. To do so, run the following commands on the command line on the machine:

sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
Install Certbot
Run this command on the command line on the machine to install Certbot.

sudo apt-get install certbot python3-certbot-nginx
#Choose how you'd like to run Certbot
#Either get and install your certificates...
#Run this command to get a certificate and have Certbot edit your Nginx configuration automatically to serve it, turning on HTTPS access in a single step.

# sudo certbot --nginx ----------------> NOT Required
# Or, just get a certificate ----------> Required

# If you're feeling more conservative and would like to make the changes to your Nginx configuration by hand, run this command.

sudo certbot certonly --nginx
# Test automatic renewal
# The Certbot packages on your system come with a cron job or systemd timer that will renew your certificates automatically before they expire. You will not need to run Certbot again, unless you change your configuration. You can test automatic renewal for your certificates by running this command:

#---> sudo certbot renew --dry-run
#---> The command to renew certbot is installed in one of the following locations:

/etc/crontab/
/etc/cron.*/*
systemctl list-timers
Confirm that Certbot worked
To confirm that your site is set up properly, visit https://yourwebsite.com/ in your browser and look for the lock icon in the URL bar. If you want to check that you have the top-of-the-line installation, you can head to https://www.ssllabs.com/ssltest/.



########################################################################################

# ### PART-2### ---> nginx as reverse proxy & redirection to 301 SSL

###
root user
###


#!/bin/bash

# https://hub.docker.com/r/bitnami/wordpress

# Create a network
docker network create bitnami-wordpress-tier

# Mariadb Setup
docker run --name mariadb --user=root -e MARIADB_DATABASE=bitnami_wordpress -e MARIADB_ROOT_PASSWORD="ausdermoitoeuropas" -v /root/mariadb:/bitnami --network="bitnami-wordpress-tier" --restart unless-stopped -d bitnami/mariadb:latest


# Phpmyadmin Setup
docker run --name phpmyadmin --network="bitnami-wordpress-tier" --link mariadb:db -id -p 8080:80 --restart unless-stopped phpmyadmin/phpmyadmin


# Wordpress Setup
docker run --name bitnami-wordpress -u root --network="bitnami-wordpress-tier" -e WORDPRESS_DATABASE_NAME="bitnami_wordpress" -e WORDPRESS_DATABASE_USER="root" -e WORDPRESS_DATABASE_PASSWORD="ausdermoitoeuropas" --link mariadb:db -v /root/wordpress:/bitnami --restart unless-stopped -d bitnami/wordpress:latest


# Nginx Container

mkdir -p ~/ssl/certs

#2
mkdir -p ~/nginx/conf.d

#3
#openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ~/ssl/certs/nginx-selfsigned.key -out ~/ssl/certs/nginx-selfsigned.crt
#openssl req \
#    -new \
#    -newkey rsa:4096 \
#    -days 365 \
#    -nodes \
#    -x509 \
#    -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" \
#    -keyout ~/ssl/certs/nginx-selfsigned.key \
#    -out ~/ssl/certs/nginx-selfsigned.crt
#4
# openssl dhparam -out ~/ssl/certs/dhparam.pem 2048

#5
cd ~/nginx/conf.d

#6
apt update -y  2> /dev/null
apt install -y vim 2> /dev/null
yum update -y  2> /dev/null
yum install -y vim 2> /dev/null

#7
echo '
server {
  listen 80;
  server_name wordpress.saqlainmushtaq.com;
  return 301 https://$host$request_uri;
}
server {
  server_name wordpress.saqlainmushtaq.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/cert1.pem;
  ssl_certificate_key /etc/ssl/certs/privkey1.pem;
  
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:HIGH:!aNULL:!MD5;
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://bitnami-wordpress:8080;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
       }
}' >  ~/nginx/conf.d/server.conf

#8
docker run --name nginx --network=bitnami-wordpress-tier --restart unless-stopped -v /etc/letsencrypt/archive/letsencrypt.saqlainmushtaq.com:/etc/ssl/certs -v ~/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx


#END
###########################################################LETSENCRYPT###############################################################################
#!/bin/bash

# https://hub.docker.com/r/bitnami/wordpress

# Create a network
docker network create bitnami-wordpress-tier

# Mariadb Setup
docker run --name mariadb --user=root -e MARIADB_DATABASE=bitnami_wordpress -e MARIADB_ROOT_PASSWORD="ausdermoitoeuropas" -v /root/mariadb:/bitnami --network="bitnami-wordpress-tier" --restart unless-stopped -d bitnami/mariadb:latest


# Phpmyadmin Setup
docker run --name phpmyadmin --network="bitnami-wordpress-tier" --link mariadb:db -id -p 8080:80 --restart unless-stopped phpmyadmin/phpmyadmin


# Wordpress Setup
docker run --name bitnami-wordpress -u root --network="bitnami-wordpress-tier" -e WORDPRESS_DATABASE_NAME="bitnami_wordpress" -e WORDPRESS_DATABASE_USER="root" -e WORDPRESS_DATABASE_PASSWORD="ausdermoitoeuropas" --link mariadb:db -p 80:8080 -v /root/wordpress:/bitnami --restart unless-stopped -d bitnami/wordpress:latest



###
Non-root user
###

#!/bin/bash

# https://hub.docker.com/r/bitnami/wordpress

# Create a network
docker network create bitnami-wordpress-tier

# Mariadb Setup
docker volume create mariadb
docker run --name mariadb -e MARIADB_DATABASE=bitnami_wordpress -e MARIADB_ROOT_PASSWORD="quickbooks2018" -v mariadb:/bitnami --network="bitnami-wordpress-tier" --restart unless-stopped -d bitnami/mariadb:latest


# Phpmyadmin Setup
docker run --name phpmyadmin --network="bitnami-wordpress-tier" --link mariadb:db -id -p 8080:80 --restart unless-stopped phpmyadmin/phpmyadmin


# Wordpress Setup
docker volume create wordpress
docker run --name bitnami-wordpress --network="bitnami-wordpress-tier" -e WORDPRESS_DATABASE_NAME="bitnami_wordpress" -e WORDPRESS_DATABASE_USER="root" -e WORDPRESS_DATABASE_PASSWORD="quickbooks2018" --link mariadb:db -p 80:8080 -v wordpress:/bitnami --restart unless-stopped -d bitnami/wordpress:latest



#END

#####################################################################################################################################################################################################################################################################################################

#!/bin/bash

# https://hub.docker.com/r/bitnami/wordpress

# Create a network
docker network create bitnami-wordpress-tier

# Mariadb Setup
docker run --name mariadb --user=1000 -e MARIADB_DATABASE=bitnami_wordpress -e MARIADB_ROOT_PASSWORD="ausdermoitoeuropas" -v /root/mariadb:/bitnami --network="bitnami-wordpress-tier" --restart unless-stopped -d bitnami/mariadb:latest


# Phpmyadmin Setup
docker run --name phpmyadmin --network="bitnami-wordpress-tier" --link mariadb:db -id -p 8080:80 --restart unless-stopped phpmyadmin/phpmyadmin


# Wordpress Setup
docker run --name bitnami-wordpress --user=1000 --network="bitnami-wordpress-tier" -e WORDPRESS_DATABASE_NAME="bitnami_wordpress" -e WORDPRESS_DATABASE_USER="root" -e WORDPRESS_DATABASE_PASSWORD="ausdermoitoeuropas" --link mariadb:db -p 8000:8080 -v /root/wordpress:/bitnami --restart unless-stopped -d bitnami/wordpress:latest



#END







#!/bin/bash

# https://hub.docker.com/r/bitnami/wordpress

# Create a network
docker network create bitnami-wordpress-tier

# Mariadb Setup
docker create -v /root/mariadb:/bitnami --name  busybox_mariadb busybox:latest
docker run --name mariadb -e MARIADB_DATABASE=bitnami_wordpress -e MARIADB_ROOT_PASSWORD="ausdermoitoeuropas" --volumes-from busybox_mariadb --network="bitnami-wordpress-tier" --restart unless-stopped -d bitnami/mariadb:latest


# Phpmyadmin Setup
docker run --name phpmyadmin --network="bitnami-wordpress-tier" --link mariadb:db -id -p 8080:80 --restart unless-stopped phpmyadmin/phpmyadmin


# Wordpress Setup
docker create -v /root/wordpress:/bitnami --name  busybox_wordpress busybox:latest
docker run --name bitnami-wordpress --network="bitnami-wordpress-tier" -e WORDPRESS_DATABASE_NAME="bitnami_wordpress" -e WORDPRESS_DATABASE_USER="root" -e WORDPRESS_DATABASE_PASSWORD="ausdermoitoeuropas" --link mariadb:db -p 8000:8080 --volumes-from busybox_wordpress --restart unless-stopped -d bitnami/wordpress:latest


#END

##############################################################################################################################################
###
Nginx
####
# Nginx Container

mkdir -p ~/ssl/certs

#2
mkdir -p ~/nginx/conf.d

#3
#openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ~/ssl/certs/nginx-selfsigned.key -out ~/ssl/certs/nginx-selfsigned.crt
#openssl req \
#    -new \
#    -newkey rsa:4096 \
#    -days 365 \
#    -nodes \
#    -x509 \
#    -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" \
#    -keyout ~/ssl/certs/nginx-selfsigned.key \
#    -out ~/ssl/certs/nginx-selfsigned.crt
#4
openssl dhparam -out ~/ssl/certs/dhparam.pem 2048

#5
cd ~/nginx/conf.d

#6
apt update -y  2> /dev/null
apt install -y vim 2> /dev/null
yum update -y  2> /dev/null
yum install -y vim 2> /dev/null

#7
echo '
server {
  listen 80;
  server_name wordpress.saqlainmushtaq.com;
  return 301 https://$host$request_uri;
}
server {
  server_name wordpress.saqlainmushtaq.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/certs/nginx-selfsigned.key;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:HIGH:!aNULL:!MD5;
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://bitnami-wordpress:8080;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
       }
}' >  ~/nginx/conf.d/server.conf

#8
docker run --name nginx --network=bitnami-wordpress-tier --restart unless-stopped -v ~/ssl/certs:/etc/ssl/certs -v ~/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx


#END


# Cleanup

#!/bin/bash


docker rm -f $(docker ps -aq)

docker rmi -f $(docker images -aq)

docker builder prune



############################################################## letsEncrypt NGINX #########################################################################

#!/bin/bash

#1
mkdir -p ~/nginx/conf.d

#2
cd ~/nginx/conf.d

#3
apt update -y  2> /dev/null
apt install -y vim 2> /dev/null
yum update -y  2> /dev/null
yum install -y vim 2> /dev/null

#4
echo '
server {
  listen 80;
  server_name letsencrypt.saqlainmushtaq.com;
  return 301 https://$host$request_uri;
}
server {
  server_name letsencrypt.saqlainmushtaq.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/fullchain1.pem;
  ssl_certificate_key /etc/ssl/certs/privkey1.pem;


    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:HIGH:!aNULL:!MD5;



location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://nodejs-ssl:8080;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;

       }
}' >  ~/nginx/conf.d/server.conf


#5
docker run --name nginx --network computan --restart unless-stopped -v /etc/letsencrypt/archive/letsencrypt.saqlainmushtaq.com:/etc/ssl/certs -v ~/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx
