#!/bin/bash
# Purpose: Kubernetes Cluster

# Kubectl Installation
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
mv ./kubectl /usr/local/bin/kubectl
kubectl version --client

# Kind Installation
# Latest Version
# https://github.com/kubernetes-sigs/kind
curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.9.0/kind-$(uname)-amd64"
# curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.9.0/kind-linux-amd64
# curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
chmod +x ./kind
mv ./kind /usr/local/bin

#########################################################################
# https://hub.docker.com/u/kindest
# https://hub.docker.com/r/kindest/node/tags

# kind create cluster --name cloudgeeks-ca

 kind create cluster --name cloudgeeks-ca --image kindest/node:v1.20.0

# kind create cluster --name cloudgeeks-ca --image kindest/node:v1.19.0

# kind create cluster --name cloudgeeks-ca --image kindest/node:v1.18.8

# kind create cluster --name cloudgeeks-ca --image kindest/node:v1.18.6

# kubectl cluster-info --context kind-cloudgeeks-ca

# kind delete cluster --name kind-cloudgeeks-ca

# Delete a cluster ---> docker rm -f $(docker ps -aq)

# Cluster stuck   ----> systemctl restart docker

##############################################################################################################################################################

# Operator Installation

kubectl create ns kafka

kubectl apply -f "https://strimzi.io/install/latest?namespace=kafka"



# cloudgeeks-ca Installation with replication (Internal) ---> ephemeral nodeport

cat << EOF | kubectl apply -n kafka -f -
apiVersion: kafka.strimzi.io/v1beta1
kind: Kafka
metadata:
  name: cloudgeeks-ca-kafka
spec:
  kafka:
    version: 2.6.0
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
      - name: external
        port: 9094
        type: nodeport
        tls: false
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      log.message.format.version: "2.6"
    storage:
      type: ephemeral  
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
EOF

###################################################################
# Strimzi Kafka Bridge Setup
---
apiVersion: kafka.strimzi.io/v1alpha1
kind: KafkaBridge
metadata:
  name: cloudgeeks-ca-bridge
  namespace: kafka
spec:
  replicas: 3
  bootstrapServers: cloudgeeks-ca-kafka-kafka-bootstrap:9092
  http:
    port: 8080
    
    
################################################################

 ---> Simply access the POD directly ---> Setup via Deployment
################################################################################################
# kubectl expose deployment cloudgeeks-ca-bridge-bridge --type=NodePort  --protocol TCP --port 80 --target-port 8080 --name=cloudgeeks-ca-bridge-exposed  -n kafka

kubectl port-forward svc/cloudgeeks-ca-bridge-exposed --address 0.0.0.0 80:31921 -n kafka 

# Background
kubectl port-forward svc/cloudgeeks-ca-bridge-exposed --address 0.0.0.0 31921:80 -n kafka &


# Simply Open the port 31921 ---> Nodeport shown in kubernetes

#####################################################################

---> Access your kafka cluster from Outside the kubernetes

---> put this URL in browser ---> http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/

curl -v GET http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/
 
curl -v GET  http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/ready

# Commands
#########################################################################

# Domain
# https://strimzi.io/docs/operators/latest/using.html#kafka-bridge-concepts-str
# https://strimzi.io/blog/2019/11/05/exposing-http-bridge/
# https://strimzi.io/blog/2020/01/27/deploying-debezium-with-kafkaconnector-resource/

# Stackoverflow
# https://stackoverflow.com/questions/64970147/how-to-access-kafka-bridge


curl -v GET http://localhost:9093/healthy

curl -v GET http://localhost:8082/ready


# Producing messages

# USING THE URL
----------------
curl -X POST \
  "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/topics/qasim-topics" \
  -H 'content-type: application/vnd.kafka.json.v2+json' \
  -d '{
    "records": [
        {
            "key": "key-1",
            "value": "value-1"
        },
        {
            "key": "key-2",
            "value": "value-2"
        },
        {
            "key": "key-3",
            "value": "taha"
        }
    ]
}'

---------------------------------------------------------------------------------------------------------
# USING THE IP
--------------

curl -X POST \
  "http://192.168.0.6:31921/topics/my-topics" \
  -H 'content-type: application/vnd.kafka.json.v2+json' \
  -d '{
    "records": [
        {
            "key": "key-1",
            "value": "value-1"
        },
        {
            "key": "key-2",
            "value": "value-2"
        },
        {
            "key": "key-3",
            "value": "taha"
        }

    ]
}'


# https://docs.confluent.io/2.0.0/kafka-rest/docs/intro.html#inspect-topic-metadata

# Get a list of topics
curl "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/topics"
 

# Get info about one topic
curl "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/topics/my-topic"
  

# Get info about a topic's partitions
 curl "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/topics/my-topic/partitions"









# Cosuming messages

curl -X POST -H "Content-Type: application/vnd.kafka.v2+json" \
      --data '{"format": "json", "auto.offset.reset": "smallest"}' \
      http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group \
     -d '{
    "name": "my-consumer",
    "format": "json",
    "auto.offset.reset": "earliest",
    "enable.auto.commit": false
  }'



# https://docs.confluent.io/2.0.0/kafka-rest/docs/intro.html#produce-and-consume-json-messages
curl -X POST "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group" \
  -H 'content-type: application/vnd.kafka.v2+json' \
  -d '{
    "name": "my-consumer",
    "format": "json",
    "auto.offset.reset": "earliest",
    "enable.auto.commit": false
  }'



# Subscribing to the topic

curl -X POST -H 'content-type: application/vnd.kafka.v2+json' \

--data '{"format": "json", "auto.offset.reset": "smallest"}' \

"http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group/instances/my-consumer/subscription"



# Consuming messages

curl "http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group/instances/my-consumer/records" \
  -H 'accept: application/vnd.kafka.json.v2+json'




# Committing offsets


curl -X POST http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group/instances/my-consumer/offsets \
  -H 'content-type: application/vnd.kafka.v2+json' \
  -d '{
    "offsets": [
        {
            "topic": "my-topic",
            "partition": 0,
            "offset": 2
        }
    ]
}'


# Deleting a consumer

curl -X DELETE http://ip172-18-0-25-bvfe2rnp2ffg00cj4ea0-31921.direct.labs.play-with-docker.com/consumers/my-group/instances/my-consumer


##############################################################################


# Check Topic creation directly in Kafka
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-topics.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe
kubectl exec -it cloudgeeks-ca-kafka-kafka-1 -c kafka -n kafka -- bin/kafka-topics.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe
kubectl exec -it cloudgeeks-ca-kafka-kafka-2 -c kafka -n kafka -- bin/kafka-topics.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe

# How to view kafka message
https://stackoverflow.com/questions/44239027/how-to-view-kafka-message

kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-console-consumer.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --topic  my-topic --from-beginning


# Kafka Commands

# Topic Creation
 --------------------
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-topics.sh --create --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --replication-factor 2 --partitions 3 --topic my-topic

# Topics Check

kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-topics.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --list

# Consumer
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-console-consumer.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --topic  my-topic --from-beginning

# Consumer Groups ---> All the consumer groups
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-consumer-groups.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --list

# Describe Consumer Groups
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-consumer-groups.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe --group console-consumer-51478

kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-consumer-groups.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe --group console-consumer-14368

kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-consumer-groups.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --describe --group console-consumer-97660

# List Producers for a topic ---> Know existing producers for a kafka topic  ---> https://stackoverflow.com/questions/48153302/know-existing-producers-for-a-kafka-topic

# Create New producers for a topic
kubectl exec -it cloudgeeks-ca-kafka-kafka-0 -c kafka -n kafka -- bin/kafka-console-producer.sh --bootstrap-server cloudgeeks-ca-kafka-kafka-bootstrap:9092 --topic my-topic

#END



