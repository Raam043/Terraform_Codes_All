#Install mentioned below packages

######################################################################################################
# https://stackoverflow.com/questions/50911540/parsing-secrets-from-aws-secrets-manager-using-aws-cli
######################################################################################################

yum update -y
yum install mysql -y
yum install jq -y

# https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/get-secret-value.html

aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1


aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString


aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson


aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson | jq -r .username


aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson | jq -r .password


aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson | jq -r .host

 
aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson | jq -r .port


###################################################################################################################################

secret=`aws secretsmanager get-secret-value --secret-id MySQLSecret --region eu-central-1 | jq .SecretString | jq fromjson`

echo $secret

username=`echo $secret | jq -r .username`

echo $username

password=`echo $secret | jq -r .password`

echo $password

host=`echo $secret | jq -r .host`

echo $host

port=`echo $secret | jq -r .port`

echo $port


mysql -h $host -u $username -P $port -p$password







# Secret-Manager-Policy


  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:ListSecretVersionIds"
      ],
      "Effect": "Allow",
      "Resource": ["arn:aws:secretsmanager:*:*:secret:${var.name}"]
    }
  ]
}
EOF
}

############################################################################


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "secretsmanager:GetSecretValue",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:DescribeKey",
                "kms:ListAliases",
                "kms:ListKeys",
                "rds:DescribeDBClusters",
                "rds:DescribeDBInstances",
                "tag:GetResources"
            ],
            "Effect": "Allow",
            "Resource": "*"
        }
    ]
}

###################################################################################################################
# https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/create-secret.html
# https://docs.aws.amazon.com/cli/latest/reference/secretsmanager/put-secret-value.html
# Use a JSON text string argument and specify key/value pairs


echo "[{"username":"bob"},{"password":"abc123xyz456"}]" > mycreds.json

(create new secret)
aws secretsmanager create-secret --name quickbooks2018 --description "Jason Key Value" --secret-string file://mycreds.json

(update existing secret)
aws secretsmanager put-secret-value --secret-id quickbooks2018 --secret-string file://mycreds.json



###################################################################################################################
#!/bin/bash

yum update -y
yum install mysql -y
yum install jq -y

secretid='cloudgeeks.ca_Mysql_Password'

secret=`aws secretsmanager get-secret-value --secret-id $secretid --region eu-central-1 | jq .SecretString | jq fromjson`

echo $secret

username=`echo $secret | jq -r .username`

echo $username

password=`echo $secret | jq -r .password`

echo $password

host=`echo $secret | jq -r .host`

echo $host

port=`echo $secret | jq -r .port`

echo $port

mysql -h $host -u $username -P $port -p$password

#END




#########################
# Docker Provide Secrets
#########################

########################
# Environment Variables
########################
# This File has Acutal Environment Variables with Secrets 

1. touch cloudgeeks_env

2. echo 'export SECRET_KEY=$(aws secretsmanager get-secret-value --secret-id stage/web --region us-east-1 | jq --raw-output  '.SecretString' | jq -r .SECRET_KEY)' > cloudgeeks_env

3. source cloudgeeks_env                # Always source it to make environment variables available



# create a File

1. touch cloudgeeks_env_placeholders          # Placeholder file for actual environment variables, provides this file to docker run or docker-compose

SECRET_KEY=${SECRET_KEY}

